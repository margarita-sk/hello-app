'use strict';

/**
 * Get the current date as a string
 *
 * @returns {String} The current date
 */
function getCurrentDateString() {
  return new Date().toISOString();
}

/**
 * Logging utility encapsulating all logging for a deployment request and sending it with the response.
 *
 * @class Logger
 */
class Logger {
  /**
   * Creates an instance of Logger.
   *
   * @memberOf Logger
   */
  constructor() {
    this.messages = [];
  }

  /**
   * Log a warning.
   *
   * @returns {undefined}
   * @memberOf Logger
   */
  warn() {
    const args = arguments;
    Object.keys(args).forEach((key) => this.messages.push(`[${getCurrentDateString()}][WARNING]: ${args[key]}`));
  }

  /**
   * Log an error.
   *
   * @returns {undefined}
   * @memberOf Logger
   */
  error() {
    const args = arguments;
    Object.keys(args).forEach((key) => this.messages.push(`[${getCurrentDateString()}][ERROR]: ${args[key]}`));
  }

  /**
   * Log a normal message
   *
   * @returns {undefined}
   * @memberOf Logger
   */
  log() {
    const args = arguments;
    Object.keys(args).forEach((key) => this.messages.push(`[${getCurrentDateString()}]: ${args[key]}`));
  }

  /**
   * Get the messages logged during the deployment.
   *
   * @returns {String[]} The messages.
   *
   * @memberOf Logger
   */
  get_messages() {
    return this.messages;
  }
}

module.exports = Logger;