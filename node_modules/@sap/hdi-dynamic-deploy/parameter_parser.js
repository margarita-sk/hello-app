'use strict';

function parse_request_body(body, logger) {
    var deployerEnv = JSON.parse(JSON.stringify(process.env));

    // first, overwrite several deployer environment variables if replacements are given in the request body
    logger.log('Parsing request body for parameters...');
    if (typeof body.HDI_DEPLOY_OPTIONS !== 'undefined') {
        deployerEnv.HDI_DEPLOY_OPTIONS = JSON.stringify(body.HDI_DEPLOY_OPTIONS);
        logger.log('Added HDI_DEPLOY_OPTIONS to the deployer environment.');
    } else {
        logger.log('No HDI_DEPLOY_OPTIONS provided by the request.');
    }

    if (typeof body.DEPLOY_ID === 'string') {
        deployerEnv.DEPLOY_ID = body.DEPLOY_ID;
        logger.log('Added DEPLOY_ID to the deployer environment.');
    } else {
        logger.log('No DEPLOY_ID provided by the request.');
    }

    if (typeof body.TARGET_CONTAINER === 'string') {
        deployerEnv.TARGET_CONTAINER = body.TARGET_CONTAINER;
        logger.log('Added TARGET_CONTAINER to the deployer environment.');
    } else {
        logger.log('No TARGET_CONTAINER provided by the request.');
    }

    if (typeof body.SERVICE_REPLACEMENTS !== 'undefined') {
        deployerEnv.SERVICE_REPLACEMENTS = JSON.stringify(body.SERVICE_REPLACEMENTS);
        logger.log('Added SERVICE_REPLACEMENTS to the deployer environment.');
    } else {
        logger.log('No SERVICE_REPLACEMENTS provided by the request.');
    }

    if (typeof body.VCAP_SERVICES !== 'undefined') {
        deployerEnv.VCAP_SERVICES = JSON.stringify(body.VCAP_SERVICES);
        logger.log('Added VCAP_SERVICES to the deployer environment.');
    } else {
        logger.log('No VCAP_SERVICES provided by the request.');
    }

    // second, merge additional service bindings into the VCAP_SERVICES
    // if given in the request body via the ADDITIONAL_VCAP_SERVICES property

    if (typeof body.ADDITIONAL_VCAP_SERVICES !== 'undefined') {
        logger.log('Found ADDITIONAL_VCAP_SERVICES in the request body.');
        if (typeof deployerEnv.VCAP_SERVICES === 'undefined') {
            // if ADDITIONAL_VCAP_SERVICES are given in the request and
            // there are no VCAP_SERVICES defined in the environment and
            // no replacements for VCAP_SERVICES are given in the request,
            // then we can simply set VCAP_SERVICES to the given ADDITIONAL_VCAP_SERVICES
            deployerEnv.VCAP_SERVICES = JSON.stringify(body.ADDITIONAL_VCAP_SERVICES);
            logger.log('Using ADDITIONAL_VCAP_SERVICES for the deployer environment since no VCAP_SERVICES are set.');
        }
        else {
            // if ADDITIONAL_VCAP_SERVICES are given and there are already VCAP_SERVICES
            // defined in the environment or replacements for VCAP_SERVICES given
            // in the request, then we have to merge the given ADDITIONAL_VCAP_SERVICES
            // into the VCAP_SERVICES of the environment

            // read the current services from the environment
            var vcapServices = JSON.parse(deployerEnv.VCAP_SERVICES);

            // loop over all service names in the additional services
            for (var service in body.ADDITIONAL_VCAP_SERVICES) {
                // linter wants a check with hasOwnProperty
                if (body.ADDITIONAL_VCAP_SERVICES.hasOwnProperty(service)) {
                    if (!vcapServices.hasOwnProperty(service)) {
                        // if there are no service bindings given in the
                        // VCAP_SERVICES for the name (e.g. "hana") of the
                        // additional service, then we can simply add the whole
                        // list of additional service bindings
                        vcapServices[service] = body.ADDITIONAL_VCAP_SERVICES[service];
                    }
                    else {
                        // if there are already service bindings given in the
                        // VCAP_SERVICES for the name (e.g. "hana") of the
                        // additional service, then we have to merge the two
                        // lists of service bindings based on the binding name

                        // first, remember all existing binding names
                        var existingBindings = [];
                        for (var i = 0; i < vcapServices[service].length; i++) {
                            existingBindings.push(vcapServices[service][i].name);
                        }

                        // loop over all bindings of the additional service
                        for (var j = 0; j < body.ADDITIONAL_VCAP_SERVICES[service].length; j++) {
                            var binding = body.ADDITIONAL_VCAP_SERVICES[service][j];
                            var vcapIndex = existingBindings.indexOf(binding.name);
                            if (vcapIndex === -1) {
                                // if there is no existing binding with the name
                                // of the additional binding, then we simply add
                                // the binding to the list in VCAP_SERVICES
                                vcapServices[service].push(binding);
                            }
                            else {
                                // if there is an existing binding with the same
                                // name as the additional binding, then we overwrite
                                // the existing binding with the additional binding
                                vcapServices[service][vcapIndex] = binding;
                            }
                        }
                    }
                }
            }
            deployerEnv.VCAP_SERVICES = JSON.stringify(vcapServices);
            logger.log('Merged ADDITIONAL_VCAP_SERVICES and VCAP_SERVICES for the deployer environment.');
        }
    }
    else {
        logger.log('No ADDITIONAL_VCAP_SERVICES provided by the request.');
    }
    logger.log('Finished parsing request body for parameters.');
    return deployerEnv;
}

module.exports = parse_request_body;
