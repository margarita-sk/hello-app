'use strict';
const crypto = require('crypto');
const util = require('util');
/**
 * Return a random ID with the given Prefix.
 *
 * @param {any} prefix Prefix
 * @returns {String} Prefix plus ID.
 */
function randomId (prefix) {
  const id = crypto.randomBytes(8).toString('hex');

  return prefix ? prefix + id : id;
}

/**
 * Write to stdout
 *
 */
function writeToStdOut () {
  var str = util.format.apply(null, arguments) + '\n';
  process.stdout.write(str);
}

/**
 * Write to stderr
 *
 */
function writeToStdErr () {
  var str = util.format.apply(null, arguments) + '\n';
  process.stderr.write(str);
}

/**
 * Logging utility
 *
 * @class IO
 */
class IO {
  /**
   * Creates an instance of IO.
   *
   * @memberOf IO
   */
  constructor () {
    this.uuid = randomId();
  }

  /**
   * Replace console.log
   *
   *
   * @memberOf IO
   */
  log () {
    const args = Array.from(arguments).map(a => {
      if (a.indexOf('\n' !== -1)) {
        const split = a.split('\n');
        if (split[split.length - 1] === '') {
          split.splice(-1, 1);
        }
        return split.map(a_part => `[${this.uuid}]: ${a_part}`).join('\n');
      } else {
        return `[${this.uuid}]: ${a}`;
      }
    });
    writeToStdOut.apply(null, args);
  }

  /**
   * Replace console.error
   *
   *
   * @memberOf IO
   */
  error () {
    writeToStdErr.apply(null, Array.from(arguments).map(a => {
      if (a && a.stack) {
        if (a.stack.indexOf('\n' !== -1)) {
          const split = a.stack.split('\n');
          a.stack = split.map(a_part => `[${this.uuid}]: ${a_part}`).join('\n');
        } else {
          a.stack = `[${this.uuid}]: ${a.message}`;
        }
      }
      return a;
    }));
  }
}

module.exports = IO;