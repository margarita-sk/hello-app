'use strict';

/**
 * Wrap a server object (currently express). This way we can decouple the "start" and "stop" actions from the underlying http server.
 *
 * @class ServerWrap
 */
class ServerWrap {
  /**
   * Creates an instance of ServerWrap.
   * @param {HTTP_Server} server HTTP server
   * @param {Number} port Port to listen on
   * @param {AuditLogger} audit_logger Audit logger
   * @memberOf ServerWrap
   */
  constructor(server, port = 0, audit_logger){
    this.port = port;
    let listener;

    const enforce_auditing = process.env.ENFORCE_AUDITING ? process.env.ENFORCE_AUDITING === 'TRUE' : false;
    const enforce_v2 = process.env.ENFORCE_V2 ? process.env.ENFORCE_V2 === 'TRUE' : false;
    /**
     * Start the HTTP server on this.port.
     *
     * @param {any} cb Callback function (error, result).
     * @returns {undefined}
     */
    this.start = function(cb){
      if (audit_logger){
        audit_logger.initialize((err) => {
          if (err){
            throw err;
          }
          listener = server.listen(this.port, (e) => {
            if (e){
              cb(e);
            } else {
              cb(null, 'Started successfully.');
            }
          });
        }, enforce_v2, enforce_auditing);
      } else {
        listener = server.listen(this.port, (e) => {
          if (e){
            cb(e);
          } else {
            cb(null, 'Started successfully.');
          }
        });
      }
    };

    /**
     * Stop the HTTP server.
     *
     * @param {any} cb Callback function (error, result).
     * @returns {undefined}
     */
    this.stop = function(cb){
      listener.close((e) => {
        if (e){
          cb(e);
        } else {
          cb(null, 'Stopped successfully.');
        }
      });
    };
  }
}

module.exports = ServerWrap;