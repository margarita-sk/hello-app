'use strict';
const xsenv = require('@sap/xsenv');
const audit_logging = require('@sap/audit-logging');

/**
 * Handle audit logging
 *
 * @class AuditLogger
 */
class AuditLogger {
  /**
   * Creates an instance of AuditLogger.
   * @param {Object} audit_logging_service Credentials for the audit logging service.
   * @param {Boolean} enforce_auditing ENFORCE_AUDITING
   * @param {String} audit_log_tenant AUDIT_LOG_TENANT
   * @memberOf AuditLogger
   */
  constructor(audit_logging_service, enforce_auditing, audit_log_tenant){
    this.credentials = audit_logging_service;
    this.audit_log_tenant = audit_log_tenant;

    /**
     * Callback function that throws any error received.
     *
     * @param {Error} e Error
     * @returns {undefined}
     * @throws {Error}
     */
    const throw_e_callback = (e) => {
      if (e){
        if (enforce_auditing){
          console.error('ENFORCE_AUDITING is TRUE and audit logging encountered an error. Throwing error.');
          throw e;
        } else {
          console.error(e);
        }
      }
    };


    /**
     * Log a failed login attempt to the audit log.
     *
     * @param {any} request HTTP Request
     *
     * @returns {undefined}
     * @memberOf AuditLogger
     */
    this.log_failed_login_attempt = (request) => {
      const username = request && request.auth && request.auth.user || '';
      const ip =  request && request.headers && request.headers['x-forwarded-for'] || request && request.connection && request.connection.remoteAddress;
      switch (this.version){
      case 'v2':
      case 'v1':
        const message = this.audit_log.securityMessage(`Unsuccessful login attempt from ip '${ip}' by user '${username}.`);
        if (this.audit_log_tenant) message.tenant(this.audit_log_tenant);
        message.by(username);
        message.log(throw_e_callback);
        return;
      }

      if (!this.version){
        throw new Error('Audit logging was not initialized properly!');
      }
    };
  }

  /**
   * Get the audit logging object initialized.
   * Callback will be called with an error if something goes wrong.
   *
   * @param {any} callback Callback
   * @param {Boolean} force_v2 Force V2 of the API
   * @param {Boolean} abort_if_error Throw an exception if audit logging is not supported
   * @returns {Function} Return with callback
   * @memberOf AuditLogger
   */
  initialize(callback, force_v2 = false, abort_if_error = false){
    console.log('Initializing audit logging...');
    audit_logging.v2(this.credentials, (error, audit_log) => {
      if (error && force_v2) {
        console.error(error);
        /*
         * if the Audit log server does not support version 2 of the REST APIs
         * an error in the callback is returned
         */
        console.log('Audit logging API V2 does not seem to be supported, and V2 was explicitly requested.');
        if (!abort_if_error){
          console.log('Proceeding without audit logging, since ENFORCE_AUDITING is not TRUE.');
        } else {
          throw new Error('ENFORCE_V2 is TRUE and ENFORCE_AUDITING is TRUE, exiting as requested! ');
        }
      } else if (error && !force_v2){
        console.error(error);
        console.log('Audit logging API V2 does not seem to be supported, falling back to API v1.');
        try {
          this.audit_log = audit_log(this.credentials);
          this.version = 'v1';
          return callback(null, true);
        } catch (e){
          console.error(e);
          if (abort_if_error){
            throw new Error('Fallback to V1 failed and ENFORCE_AUDITING is TRUE, exiting as requested!');
          } else {
            console.log('Fallback to V1 failed, proceeding without audit logging.');
            return callback(null, false);
          }
        }
      } else {
        this.audit_log = audit_log;
        this.version = 'v2';
        return callback(null, true);
      }
    });
  }
}
/**
 * Returns a audit logging service if one is bound. Assumes only one audit logging instance is bound.
 *
 * @returns {Object|undefined} The instance
 */
function get_audit_logging_service_if_bound(){
  try {
    const log_service = xsenv.cfServiceCredentials({tag: 'auditlog'});
    return log_service;
  } catch (e){
    return undefined;
  }
}
module.exports.get_audit_logging_service_if_bound = get_audit_logging_service_if_bound;
module.exports.AuditLogger = AuditLogger;